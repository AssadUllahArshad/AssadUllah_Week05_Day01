from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
# Select features for clustering
features_for_clustering = ['Age', 'AnnualIncome (USD)', 'TotalPurchases']

# Standardize the features for better clustering performance
scaler = StandardScaler()
data_scaled = scaler.fit_transform(data[features_for_clustering])

# Determine the optimal number of clusters using the Elbow Method
inertia_values = []
for k in range(1, 11):
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(data_scaled)
    inertia_values.append(kmeans.inertia_)

# Plot the Elbow Method to determine the optimal number of clusters
plt.figure(figsize=(8, 6))
plt.plot(range(1, 11), inertia_values, marker='o')
plt.title('Elbow Method for Optimal K')
plt.xlabel('Number of Clusters (K)')
plt.ylabel('Inertia (Within-Cluster Sum of Squares)')
plt.show()

# Based on the Elbow Method, let's choose K=3
k = 6

# Apply K-means clustering with K=3
kmeans = KMeans(n_clusters=k, random_state=42)
df['Cluster'] = kmeans.fit_predict(data_scaled)

# Visualize the clusters
plt.figure(figsize=(10, 8))
sns.scatterplot(x='TotalPurchases', y='AnnualIncome (USD)', hue='Cluster', data=df, palette='Set1', s=100)
plt.title('Customer Segmentation using K-means Clustering')
plt.xlabel('Total Purchases')
plt.ylabel('Annual Income (USD)')
plt.show()
